<?php
/**
 * @file
 */

/**
 * Implements hook_field_info().
 */
function css_field_field_info() {
  return array(
    'css_field' => array(
      'label' => t('CSS'),
      'description' => t('This field stores CSS and media information in the database.'),
      'default_widget' => 'css_field',
      'default_formatter' => 'css_field',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function css_field_field_widget_info() {
  return array(
    'css_field_textfield' => array(
      'label' => t('CSS snippet'),
      'field types' => array('css_field'),
      'settings' => array(
        'css_field_editor_theme' => 'solarized_dark',
        'css_field_enable_online_validation' => FALSE,
      ),
      'weight' => 0,
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function css_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $options = array(
    'none' => t('None'),
    'solarized_dark' => t('Solarized Dark'),
    'solarized' => t('Solarized'),
    'ambiance' => t('Ambiance'),
    'clouds' => t('Clouds'),
    'dreamweaver' => t('Dreamweaver'),
    'monokai' => t('Monokai'),
    'xcode' => t('Xcode'),
  );

  $element['css_field_editor_theme'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Select editor theme'),
    '#description' => t("Select the editor's theme style for the css field"),
    '#default_value' => isset($settings['css_field_editor_theme']) ? $settings['css_field_editor_theme'] : 'solarized_dark',
  );

  $element['css_field_enable_online_validation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable W3Validation'),
    '#description' => t('This will enable a remote validation service to scan the css and report errors with the css before allowing it to be saved.'),
    '#default_value' => isset($settings['css_field_enable_online_validation']) ? $settings['css_field_enable_online_validation'] : FALSE,
  );

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function css_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // Defaults
  $defaults = array(
    'css' => '',
    'media' => 'all',
    'description' => '',
  );

  // Bring in the javascript that sets the ace editor and sets the editor theme.
  if (isset($settings['css_field_editor_theme'])) {
    $editor_theme = $settings['css_field_editor_theme'];
    if ($editor_theme !== 'none') {
      drupal_add_js(drupal_get_path('module', 'css_field') . '/js/css_field.js');
      drupal_add_js(array('css_field' => array('editorTheme' => $editor_theme)), 'setting');
    }
  }

  // If only one item, place it in a fieldset to keep it organized.
  if ($field['cardinality'] == 1) {
    $element['#type'] = 'fieldset';
  }

  // Items specific to snippet widget.
  $element['css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS snippet'),
    '#row' => 10,
    '#attributes' => array(
      'data-ace-editor-css' => 'data-ace-editor-css',
    ),
    '#default_value' => isset($items[$delta]['css']) ? check_plain($items[$delta]['css']) : $defaults['css'],
  );


  // Basic html style tag media defaults.
  $options = array(
    'all' => t('All'),
    'screen' => t('Screen'),
    'print' => t('Print'),
    'speech' => t('Speech'),
  );

  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all();
    foreach ($breakpoints as $breakpoint) {
      $options[$breakpoint->machine_name] = $breakpoint->breakpoint;
    }
  }

  $element['media'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Media query'),
    '#description' => t('Select what media (all, print, screen...) or breakpoint this css should be applied to.'),
    '#default_value' => isset($items[$delta]['media']) ? $items[$delta]['media'] : $defaults['media'],
  );

  return $element;
}

/**
 * Implementation of hook_field_is_empty().
 */
function css_field_field_is_empty($item, $field) {
  if (empty($item['css'])) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function css_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  global $language;

  // For each item, try to send it to the validator
  foreach($items as $delta => $item) {

    if (!empty($item['css'])) {
      // If external validation is turned on and its the text area widget.
      if ($settings['css_field_enable_online_validation'] == TRUE) {
        // Assemble our validation email that will go to w3.org.
        $url = 'http://jigsaw.w3.org/css-validator/validator?profile=css3&output=text&lang=' . $language->language .'&text=' . urlencode($item['css']);
        $response = drupal_http_request($url);
        if ($response->code == 200) {
          $error = strpos($response->data, 'Sorry!');
          if ($error !== FALSE ) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'css_syntax',
              'message' => $response->data,
            );
          }
        }
        // If we couldn't connect to the service, allow the code for now.
        elseif ($response->code != 200) {
          drupal_print_message(t('Could not connect to W3Validator to perform css validation. Your code has been allowed.....for now.'));
        }
      }
    }

  }
}

/**
 * Implements hook_field_formatter_info().
 */
function css_field_field_formatter_info() {
  return array(
    'css_field' => array(
      'label' => t('CSS: Embedded'),
      'field types' => array('css_field'),
    ),
    'css_field_plain' => array(
      'label' => t('CSS: Plain'),
      'field types' => array('css_field'),
    ),
    'css_field_styled' => array(
      'label' => t('CSS: Styled'),
      'field types' => array('css_field'),
      'settings' => array(
        'css_field_display_theme' => 'solarized_dark',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function css_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'css_field_styled') {
    $options = array(
      'none' => t('None'),
      'solarized_dark' => t('Solarized Dark'),
      'solarized' => t('Solarized'),
      'ambiance' => t('Ambiance'),
      'clouds' => t('Clouds'),
      'dreamweaver' => t('Dreamweaver'),
      'monokai' => t('Monokai'),
      'xcode' => t('Xcode'),
    );

    $element['css_field_display_theme'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('Select display theme'),
      '#description' => t("Select the theme style for the display of this css field"),
      '#default_value' => isset($settings['css_field_display_theme']) ? $settings['css_field_display_theme'] : 'solarized_dark',
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function css_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'css_field_styled') {
    $summary = t('Display theme: @theme', array('@theme' => $settings['css_field_display_theme']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function css_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'css_field':
      foreach ($items as $key => $value) {
        $breakpoint = NULL;
        if (module_exists('breakpoints')) {
          $breakpoint = breakpoints_breakpoint_load_by_fullkey($value['media']);
        }
        $media = !empty($breakpoint) ? $breakpoint->breakpoint : $value['media'];
        $data = check_plain($value['css']);
        $options = array(
          'type' => 'inline',
          'basename' => 'css_field_' . $entity_type,
          'media' => $media,
          'group' => CSS_THEME,
          'preprocess' => TRUE,
          'weight' => '9999',
          'attributes' => array(
            'class' => 'css-field',
          ),
        );
        drupal_add_css($data, $options);
      }
      break;
    case 'css_field_plain':
      foreach ($items as $key => $value) {
        $element[$key] = array(
          '#type' => 'markup',
          '#markup' => '<small><pre>' . check_plain($value['css']) . '</pre></small>',
        );
      }
      break;
    case 'css_field_styled':
      $display_theme = $settings['css_field_display_theme'];
      if ($display_theme != 'none') {
        drupal_add_js(drupal_get_path('module', 'css_field') . '/js/css_field_formatter_display.js');
        drupal_add_js(array('css_field' => array('displayTheme' => $display_theme)), 'setting');
        foreach ($items as $key => $value) {
          $element[$key] = array(
            '#type' => 'textarea',
            '#value' => check_plain($value['css']),
            '#row' => 10,
            '#attributes' => array(
              'data-ace-editor-css' => 'data-ace-editor-css',
            ),
          );
        }
      }
      else {
        foreach ($items as $key => $value) {
          $element[$key] = array(
            '#type' => 'markup',
            '#markup' => '<small><pre>' . check_plain($value['css']) . '</pre></small>',
          );
        }
      }
      break;
  }

  return $element;
}
